/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cdcbconsolidator;

import inputfiles.AnimDBReader;
import inputfiles.EvalDBReader;
import actions.ConvertToOldFile;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.SwingWorker.StateValue;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author dbickhart
 */
public class CDCBFrame extends javax.swing.JFrame {
    private final JFrame dialogFrame;
    private static final Logger log = Logger.getLogger(CDCBFrame.class.getName());
    /**
     * Creates new form CDCBFrame
     */
    public CDCBFrame() {
        this.dialogFrame = new JFrame("Message Box");
        initComponents();
        this.jFileChooser.setPreferredSize(new Dimension(800,600));
        FileNameExtensionFilter csvFilter = new FileNameExtensionFilter("CSV FILES", "csv");
        this.jFileChooser.setFileFilter(csvFilter);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        AnimTextField = new javax.swing.JTextField();
        EvalTextField = new javax.swing.JTextField();
        BBRTextField = new javax.swing.JTextField();
        AnimBrowse = new javax.swing.JButton();
        EvalBrowse = new javax.swing.JButton();
        BBRBrowse = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        OutputTextField = new javax.swing.JTextField();
        OutputBrowse = new javax.swing.JButton();
        ClearButton = new javax.swing.JButton();
        Convert = new javax.swing.JButton();
        ConvertProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CDCB File Conversion Suite");

        jLabel2.setText("Anim File");

        jLabel3.setText("Eval File");

        jLabel4.setText("BBR File");

        AnimBrowse.setText("Browse");
        AnimBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnimBrowseActionPerformed(evt);
            }
        });

        EvalBrowse.setText("Browse");
        EvalBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EvalBrowseActionPerformed(evt);
            }
        });

        BBRBrowse.setText("Browse");
        BBRBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBRBrowseActionPerformed(evt);
            }
        });

        jLabel5.setText("Output");

        OutputBrowse.setText("Browse");
        OutputBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputBrowseActionPerformed(evt);
            }
        });

        ClearButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ClearButton.setText("Clear");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        Convert.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Convert.setText("Convert");
        Convert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvertActionPerformed(evt);
            }
        });

        ConvertProgressBar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ConvertProgressBarStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ConvertProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(BBRTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AnimTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EvalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AnimBrowse)
                                    .addComponent(EvalBrowse)
                                    .addComponent(BBRBrowse)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(OutputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(OutputBrowse))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(ClearButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Convert)))))
                        .addGap(14, 14, 14)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(AnimTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnimBrowse))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(EvalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EvalBrowse))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(BBRTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BBRBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(OutputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(OutputBrowse)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ClearButton)
                    .addComponent(Convert))
                .addGap(18, 18, 18)
                .addComponent(ConvertProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("CDCB Conversion", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AnimBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnimBrowseActionPerformed
        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser.getSelectedFile();
            try {
              // What to do with the file, e.g. display it in a TextArea
                this.AnimTextField.setText(file.getAbsolutePath());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this.dialogFrame, "Could not open Anim file for reading!");
            }
        }
    }//GEN-LAST:event_AnimBrowseActionPerformed

    private void EvalBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EvalBrowseActionPerformed
        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser.getSelectedFile();
            try {
              // What to do with the file, e.g. display it in a TextArea
                this.EvalTextField.setText(file.getAbsolutePath());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this.dialogFrame, "Could not open Eval file for reading!");
            }
        }
    }//GEN-LAST:event_EvalBrowseActionPerformed

    private void OutputBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputBrowseActionPerformed
        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser.getSelectedFile();
            try {
              // What to do with the file, e.g. display it in a TextArea
                this.OutputTextField.setText(file.getAbsolutePath());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this.dialogFrame, "Could not create Output file for Writing!");
            }
        }
    }//GEN-LAST:event_OutputBrowseActionPerformed

    private void BBRBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBRBrowseActionPerformed
        JOptionPane.showMessageDialog(this.dialogFrame, "Feature not implemented yet! Stay tuned kids!");
        /*int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = jFileChooser.getSelectedFile();
        try {
        // What to do with the file, e.g. display it in a TextArea
        this.BBRTextField.setText(file.getAbsolutePath());
        } catch (Exception ex) {
        JOptionPane.showMessageDialog(this.dialogFrame, "Could not open BBR file for reading!");
        }
        }*/
    }//GEN-LAST:event_BBRBrowseActionPerformed

    private boolean checkIfFileExists(String file){
        File test = new File(file);
        return test.canRead();
    }
    private void ConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertActionPerformed
        // Check for file presence
        boolean animB = this.AnimTextField.getText().isEmpty() || this.AnimTextField.getText().equals("");
        boolean evalB = this.EvalTextField.getText().isEmpty() || this.EvalTextField.getText().equals("");
        log.log(Level.INFO, "Starting method");
        if(animB || evalB){
            JOptionPane.showMessageDialog(this.dialogFrame, "You must specify at least the Anim and Eval files!");
            return;
        }
        
        if(!this.checkIfFileExists(this.AnimTextField.getText())
                || !this.checkIfFileExists(this.EvalTextField.getText())){
            JOptionPane.showMessageDialog(this.dialogFrame, "Could not find the Anim or Eval files specified!");
            return;
        }
        log.log(Level.INFO, "Beginning conversion");
        // Load files
        
        converter worker = new converter(this.AnimTextField.getText(), this.EvalTextField.getText(), this.OutputTextField.getText());
        worker.addPropertyChangeListener(new progressListener(this.ConvertProgressBar));
        try {
            worker.execute();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this.dialogFrame, "Ran into an error! " + ex.getMessage());
            log.log(Level.SEVERE, "Error in execution!", ex);
        }
      
        while(worker.getState() != StateValue.DONE){
            // Wait
        }
        
        log.log(Level.INFO, "Completed routine for conversion");
                
    }//GEN-LAST:event_ConvertActionPerformed

    private class converter extends SwingWorker<Void, Void>{
        private final String AnimText;
        private final String EvalText;
        private final String OutText;
        
        public converter(String AnimText, String EvalText, String OutText){
            this.AnimText = AnimText;
            this.EvalText = EvalText;
            this.OutText = OutText;
        }
        
        @Override
        protected Void doInBackground() throws Exception {
            setProgress(0);
            BufferedFileDBReader aReader = new AnimDBReader();
            boolean state = aReader.straightFileConversion(this.AnimText);
            if(state){
                log.log(Level.INFO, "Successfully read ANIM file!");
            }
            
            setProgress(30);
            BufferedFileDBReader eReader = new EvalDBReader();
            
            state = eReader.straightFileConversion(this.EvalText);
            if(state){
                log.log(Level.INFO, "Successfully read EVAL file!");
            }
            
            setProgress(60);
            //Produce output
            ConvertToOldFile converter = new ConvertToOldFile(aReader, eReader);
            
            try {
                converter.PrintToOutput(this.OutText);
            } catch (Exception exception) {
                log.log(Level.SEVERE, "Error writing to output!", exception);
                throw new Exception("Error in output!");
            }
            
            
            setProgress(100);
            return null;
        }
        
    }
    
    private class progressListener implements PropertyChangeListener{
        private javax.swing.JProgressBar progress;
        
        public progressListener(javax.swing.JProgressBar progress){
            this.progress = progress;
        }

        @Override
        public void propertyChange(PropertyChangeEvent pce) {
            if("progress" == pce.getPropertyName()){
                int pstate = (Integer) pce.getNewValue();
                this.progress.setValue(pstate);
            }
        }
        
    }
    
    
    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        this.AnimTextField.setText("");
        this.BBRTextField.setText("");
        this.EvalTextField.setText("");
        this.OutputTextField.setText("");
        this.ConvertProgressBar.setValue(0);
    }//GEN-LAST:event_ClearButtonActionPerformed

    private void ConvertProgressBarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ConvertProgressBarStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ConvertProgressBarStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CDCBFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CDCBFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CDCBFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CDCBFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CDCBFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnimBrowse;
    protected javax.swing.JTextField AnimTextField;
    private javax.swing.JButton BBRBrowse;
    protected javax.swing.JTextField BBRTextField;
    private javax.swing.JButton ClearButton;
    private javax.swing.JButton Convert;
    protected javax.swing.JProgressBar ConvertProgressBar;
    private javax.swing.JButton EvalBrowse;
    protected javax.swing.JTextField EvalTextField;
    private javax.swing.JButton OutputBrowse;
    protected javax.swing.JTextField OutputTextField;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
